global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def matmath():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
        return first != ignore
    except StopIteration:
        return False

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def in_itemize(snip):
    # find using searchpairpos('\begin{itemize}','','\end{itemize}','bnWz')
    beginpos = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}','bnWz')")
    endpos   = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}', 'nWz')")
    curpos   = snip.cursor.to_vim_cursor()
    if beginpos == ['0','0'] or endpos == ['0','0']: return False
    if posCompare(beginpos, curpos) < 0 and posCompare(curpos, endpos) < 0:
        return True
    else:
        return False

def posCompare(cur1, cur2):
    """ returns -1 if cur1 is before cur2, +1 if after, and 0 if cur1==cur2
        cur1, cur2 are required to be lists of the form [row,col]
    """
    cur1r = int(cur1[0])
    cur1c = int(cur1[1])
    cur2r = int(cur2[0])
    cur2c = int(cur2[1])
    if   cur1r < cur2r: return -1
    elif cur1r > cur2r: return  1
    else:
        if   cur1c < cur2c: return -1
        elif cur1c > cur2c: return  1
        else: return 0

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{@{}" + "".join(['$' + str(i + 1) for i in range(cols)]) + "@{}}\n\\toprule\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
		if i == 0:
			final_str += "\midrule\n"
	final_str += old_spacing + "\\bottomrule\n\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"
	snip.expand_anon(final_str)

def create_matrix(snip):
	matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()
	rows = '.'.join(snip.buffer[snip.line].split(".", 2)[:-1])
	cols = '.'.join(snip.buffer[snip.line].split(".", 2)[-1:])
	augment = True if (snip.buffer[snip.line])[-1] == 'a' else False
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{"+matrix_str+"}[" + ('c' * (cols - 1)) + "|c]\n" if augment else old_spacing + "\\begin{"+matrix_str+"}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"
	snip.expand_anon(final_str)

endglobal

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "(\d+)tr" "Add table row of dimension ..." r
endsnippet

snippet tmd "midrule"
\midrule$0
endsnippet

snippet tcr "table color"
\rowcolor[${1:gray}]{${2:0.85}}
endsnippet

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(\d+).(\d+)(a?)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

snippet newtexdoc "creates new tex doc"
\documentclass{article}

\usepackage{graphicx}
\graphicspath{{figures/}}
\usepackage[lecture]{random}
\pagestyle{fancy}
\fancyhf{}
\rhead{\textsc{Evelyn Koo}}
\chead{\textsc{${1:type of notes}}}
\lhead{${2:course/book}}
\cfoot{\thepage}

\begin{document}
\title{$3}
\author{Evelyn Koo}
\date{$4}
\maketitle
\tableofcontents
\section*{${5:Introduction}}
\addcontentsline{toc}{section}{${5:Introduction}}
$6
\subsection*{Remarks}
$0
\end{document}
endsnippet

snippet hwtex "texdoc for hw"
\documentclass{article}

\usepackage{graphicx}
\graphicspath{{figures/}}
\usepackage[lecture]{random}
\pagestyle{fancy}
\fancyhf{}
\rhead{\textsc{Evelyn Koo}}
\chead{\textsc{Homework $1}}
\lhead{$2}
\cfoot{\thepage}

\begin{document}
\homework[`date +%F`]{$2}{$1}
$0
\end{document}
endsnippet

snippet tikztex "standalone tikz tex file"
\documentclass[tikz]{standalone}
\usepackage[T1]{fontenc}
\usepackage{newtxtext}
\usepackage[smallerops]{newtxmath}
\usepackage{varwidth}
\usepackage{xcolor}
$1
\begin{document}
\begin{tikzpicture}
$0
\end{tikzpicture}
\end{document}
endsnippet

snippet toc "add to toc"
\addcontentsline{toc}{${1:section}}{$2}
$0
endsnippet

snippet #f "fancy section header"
\fancysec[`date +%F`]{$2}{$1}$0
endsnippet

context "math()"
snippet ac "cases"
\begin{cases}
$1 & $2 \\\\
$3 & $4 \\\\
\end{cases}
$0
endsnippet

snippet tikz "tikz" b
\begin{tikzpicture}
$1
\end{tikzpicture}
endsnippet

context "env('tikzpicture')"
snippet aax "axis"
\begin{axis}[axis lines=middle, xmin=$1, xmax=$2, ymin=$3, ymax=$4]
$0
\end{axis}
endsnippet

context "env('tikzpicture')"
snippet apl "add plot"
\addplot[domain=-${1:-3}:${2:3}] {$3}
endsnippet

context "env('tikzpicture')"
snippet tnode "tikz node"
\node [${1:circle}, ${2:draw}] ($3) ${4:[right of = $5]} {$6}; $0
endsnippet

context "env('tikzpicture')"
snippet tpath "tikz path"
\path ($1) edge ${2:[bend left]} node [${3:above}] {$4} ($5); $0
endsnippet

snippet # "Section" b
\section{$1}
$0
endsnippet

snippet #* "Section*" b
\section*{$1}
$0
endsnippet

snippet #l "Lecture" b
\lecture[`date +%F`]{$1}
$0
endsnippet

snippet #ch "chapter" 
\bookchap[`date +%F`]{$1}{${2:\thesection}}
endsnippet

snippet ## "Subsection" b
\subsection{$1}
$0
endsnippet

snippet ##* "Subsection*" b
\subsection*{$1}
endsnippet

snippet ### "subsubsection" b
\subsubsection{$1}
$0
endsnippet

snippet ###* "subsubsection*" b
\subsubsection*{$1}
$0
endsnippet

snippet #c
\textbf{\underline{$1}}
$0
endsnippet

snippet -i "start list of items" b
\begin{itemize}
\item $1
$0
\end{itemize}
endsnippet

context "env('itemize'), env('enumerate')"
snippet - "bullet point"
\item $1
endsnippet

snippet -e "enumerate" b
\begin{enumerate}
\item $0
\end{enumerate}
endsnippet

snippet !l "Link"
\href{$1}{\color{${3:black}}$2}$0
endsnippet

snippet !i "Image (includegraphics)"
\begin{center}
\includegraphics[width=${1:0.5}\textwidth]{$2}
\end{center}
endsnippet

context "env('figure')"
snippet gr
\includegraphics[width=${1:0.5}\textwidth]{$2}\centering\caption{$3}$0
endsnippet

snippet !f "Figure (figure environment)"
\begin{figure}[${1:ht}]
$0
\end{figure}
endsnippet

snippet mp "minipage"
\begin{minipage}{${1:0.5}\textwidth}
$0
\end{minipage}
endsnippet

snippet dl "declare code language"
\newcommand\lang{${1:python}}
$0
endsnippet

snippet cl "change code language"
\renewcommand\lang{${1:text}}
$0
endsnippet

snippet qw "code-inline"
\mintinline{${1:text}}{$2}$0
endsnippet

snippet qe "codebox"
\begin{minted}{${1:\lang}}
$0
\end{minted}
endsnippet

snippet qf "float code - listing env"
\begin{listing}
\begin{minted}{${1:\lang}}
$2	
\end{minted}
\end{listing}
$0
endsnippet

snippet nb "quotes"
\begin{notebox}[$1]
$0
\end{notebox}
endsnippet

snippet sq "single quotes"
\`$1'$0
endsnippet

snippet qq "quotes quotes"
\`\`$1''$0
endsnippet

snippet acd "add codef"
\begin{tcbcodef}[name = $1, minted language = ${2:\lang}]{
$3
}
$0
\end{tcbcodef}
endsnippet

snippet ace "add codex"
\begin{tcbcodex}[name = $1, minted language = ${2:\lang}]{
$3
}
$0
\end{tcbcodex}
endsnippet

snippet adef "add def box"
\begin{definition}[$1]{$0
}
\end{definition}
endsnippet

snippet aex "add example box"
\begin{example}[$1]{$0
}
\end{example}
endsnippet

snippet athm "add theorem box"
\begin{theorem}[$1]{$0
}
\end{theorem}
endsnippet

snippet tcbl "tcbline"
\tcbline 
$0
endsnippet

snippet it "italics"
\textit{$1}$0
endsnippet

snippet bf "bold" 
\textbf{$1}$0
endsnippet

snippet sc "small caps"
\textsc{$1}$0
endsnippet

snippet tu "underline"
\underline{$1}$0
endsnippet

snippet tov "overline"
\overline{$1}$0
endsnippet

context "math()"
snippet upar "uparrow"
\uparrow
endsnippet

context "math()"
snippet dnar "downarrow"
\downarrow
endsnippet

context "math()"
snippet mrm "mathrm"
\mathrm{$1}$0
endsnippet

snippet sol "solution" bA
\begin{solution}
$0
\end{solution}
endsnippet

snippet today "Date"
`date +%F`
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet bfr "beamer frame" bA
\begin{frame}
\frametitle{$1}
$0
\end{frame}
endsnippet

snippet bcol "beamer column" bA
\begin{column}{${1:0.5}\textwidth}
$0
\end{column}
endsnippet

snippet smtx "small text" bA
\small{$1}
endsnippet

snippet ftx "footnote text" bA
\footnotesize{$1}
endsnippet

snippet stx "script text" bA
\scriptsize{$1}
endsnippet

snippet ttx "tiny text" bA
\tiny{$1}
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali  "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet gat "gather" bA
\begin{gather*}
	${1:${VISUAL}}
.\end{gather*}
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0

i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 1100
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ... "dots" iA 
\ldots
endsnippet

context "math()"
snippet '([clvd]).'... "auto dots" iA
`!p snip.rv = ""\\" + match.group(1) + "dots"` 
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet <= "leq" iA
\leq
endsnippet

snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet lb "line break" iA 
\\\\ $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet vtr "^T" iA
^T
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet inv "inverse" iA 
^{-1}
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet sum "sum" w
\sum_{${1:i=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

context "math()"
snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI"
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

context "math()"
snippet FF "F" iA 
\mathbb{F}
endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet DD "D" iA
\mathbb{D}
endsnippet

context "math()"
snippet vec "vector" iA 
\mathbf{${1:v}}$0
endsnippet

context "math()"
snippet zvc "zero vector" iA 
\mathbf{0}$0
endsnippet

context "math()"
snippet vno "vector norm" iA 
\| \mathbf{${1:v}} \|$0
endsnippet 

context "math()"
snippet iprod "inner product, 2 vectors" iA 
\left< \mathbf{${1:u}}, \mathbf{${2:v}} \right> $0
endsnippet

snippet 2pm "2x2 pmat" iA
\begin{pmatrix}
$1 & $2 \\\\ 
$3 & $4 \\\\ 
\end{pmatrix} $0
endsnippet

snippet 2bm "2x2 bmat" iA
\begin{bmatrix} 
$1 & $2 \\\\ 
$3 & $4 \\\\ 
\end{bmatrix} $0
endsnippet

snippet bm
\begin{bmatrix}
$0
\end{bmatrix}
endsnippet

context "math()"
snippet alpha "alpha" iA
\alpha
endsnippet

context "math()"
snippet beta "beta" iA
\beta
endsnippet

context "math()"
snippet theta "theta" iA 
\theta
endsnippet

context "math()" 
snippet pphi "phi" iA 
\phi 
endsnippet

context "math()" 
snippet tau "tau" iA 
\tau
endsnippet

context "math()" 
snippet dtr "Delta" iA 
\Delta
endsnippet

context "math()"
snippet mu "mu" iA 
\mu
endsnippet

context "math()"
snippet lmbd "lambda" iA 
\lambda
endsnippet

context "math()"
snippet gam "gamma" iA 
\gamma
endsnippet

context "math()"
snippet sig "sigma" iA 
\sigma
endsnippet

context "math()"
snippet svr "set of variables"
${1:x}_1, ${1:x}_2, \ldots, ${1:x}_${2:n}$0
endsnippet

context "math()"
snippet bnc "binomial"
\binom{$1}{$2}$0
endsnippet
